(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{474:function(e,a,l){"use strict";l.r(a);var t=l(56),n=Object(t.a)({},(function(){var e=this,a=e.$createElement,l=e._self._c||a;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h1",{attrs:{id:"七-value是如何工作的"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#七-value是如何工作的"}},[e._v("#")]),e._v(" 七：@Value是如何工作的")]),e._v(" "),l("p",[e._v("@Value注解和@Resource、@Autowired类似，也是用来对属性进行依赖注入的，只不过@Value是用来从Properties文件中来获取值，且@Value可以解析SpEL(Spring表达式)")]),e._v(" "),l("ul",[l("li",[l("code",[e._v('@Value("hello")')]),e._v(" 直接将字符串hello赋值给属性，如果属性类型不是String,或无法进行类型转化，则报错。")]),e._v(" "),l("li",[l("code",[e._v('@Value("${name}")')]),e._v(" 将会把${}中的字符串当做key，从Properties文件中找出对应的value赋值给属性，如果没找到，则会把“${name}”当做普通字符串注入给属性。")]),e._v(" "),l("li",[l("code",[e._v('@Value("#{name}")')]),e._v(' 会将#{}中的字符传当做Spring表达式进行解析，Spring会把"name"当做beanName,并从Spring容器中找对应bean,如果找到则进行属性注入，没找到则报错')])])])}),[],!1,null,null,null);a.default=n.exports}}]);