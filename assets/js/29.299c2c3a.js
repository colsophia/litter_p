(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{476:function(e,n,a){"use strict";a.r(n);var t=a(56),i=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"一-beandefinition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-beandefinition"}},[e._v("#")]),e._v(" 一：BeanDefinition")]),e._v(" "),a("h2",{attrs:{id:"官方文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#官方文档"}},[e._v("#")]),e._v(" 官方文档")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1.3. Bean Overview\nA Spring IoC container manages one or more beans. These beans are created with the configuration metadata that you supply to the container (for example, in the form of XML &lt;bean/> definitions).\n\nSpring IoC 容器管理一个或多个 bean。这些 bean 是使用您提供给容器的配置元数据创建的(例如，以 XML &lt; bean/> 定义的形式)。\n\nWithin the container itself, these bean definitions are represented as BeanDefinition objects\n\n在容器本身中，这些 bean 定义被表示为 BeanDefinition 对象，\n")])])]),a("h2",{attrs:{id:"_1、什么是beandefinition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是beandefinition"}},[e._v("#")]),e._v(" 1、什么是BeanDefinition")]),e._v(" "),a("p",[e._v("BeanDefinition表示"),a("strong",[e._v("Bean的定义")]),e._v("。Spring根据BeanDefinition来创建Bean对象。BeanDefinition有很多的属性用来描述Bean。")]),e._v(" "),a("h2",{attrs:{id:"_2、beandefinition中重要的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、beandefinition中重要的属性"}},[e._v("#")]),e._v(" 2、BeanDefinition中重要的属性")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("beanClass：")]),e._v(" 表示一个bean的类型，如：UserService.class，Spring在创建Bean的过程中会根据此属性来实例化得到对象。")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("scope：")]),e._v(" 表示一个bean的作用域。scope=singleton =》一个单例bean。scope=prototype =》一个多例bean。")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("isLazy：")]),e._v(" 表示一个bean是不是需要懒加载，原型bean（多例）的isLazy属性不起作用，懒加载的单例bean,会再一次getBean的时候生成该bean,非懒加载的bean,会在Spring启动过程中直接生成好")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("dependsOn：")]),e._v(" 表示一个bean在创建之前所依赖的其他bean,在一个bean创建之前，它所依赖的这些bean都需要先创建好")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("primary：")]),e._v(" 表示一个bean是主bean,在Spring中一个类型可以有多个bean对象，在进行依赖注入时，如果根据类型找到了多个bean，此时会判断这些bean中是否存在一个主bean，如果存在，则直接将这个bean注入给属性")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("initMethodName：")]),e._v(" 表示一个bean的初始化方法，一个bean的生命周期过程中有一个步骤叫初始化，Spring会在这个步骤中去调用bean的初始化方法，初始化逻辑由程序员自己控制，表示程序员可以自定义逻辑对bean进行加工")])])]),e._v(" "),a("hr"),e._v(" "),a("p",[a("code",[e._v("@Component @Bean <bean/>")]),e._v(" 这些最终都会被解析为BeanDefinition对象")]),e._v(" "),a("h2",{attrs:{id:"_3、bean的命名约定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、bean的命名约定"}},[e._v("#")]),e._v(" 3、bean的命名约定")]),e._v(" "),a("p",[e._v("以小写字母开头，驼峰命名。如：loginController,accountService,userDao等")])])}),[],!1,null,null,null);n.default=i.exports}}]);