(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{478:function(a,t,e){"use strict";e.r(t);var n=e(56),r=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"二-beanfactory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-beanfactory"}},[a._v("#")]),a._v(" 二：BeanFactory")]),a._v(" "),e("h2",{attrs:{id:"_1、什么是beanfactory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是beanfactory"}},[a._v("#")]),a._v(" 1、什么是BeanFactory")]),a._v(" "),e("p",[a._v("BeanFactory是一种Spring容器。是一种Bean工厂。可以用来创建Bean,获取Bean。")]),a._v(" "),e("h2",{attrs:{id:"_2、beandefinition和beanfactory和bean对象之间的关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、beandefinition和beanfactory和bean对象之间的关系"}},[a._v("#")]),a._v(" 2、BeanDefinition和BeanFactory和Bean对象之间的关系")]),a._v(" "),e("p",[a._v("BeanFactory利用BeanDefinition来生成Bean对象")]),a._v(" "),e("h2",{attrs:{id:"_3、beanfactory的核心子接口和实现类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、beanfactory的核心子接口和实现类"}},[a._v("#")]),a._v(" 3、BeanFactory的核心子接口和实现类")]),a._v(" "),e("ul",[e("li",[e("p",[e("strong",[a._v("ListableBeanFactory：")]),a._v(" 支持单例Bean、支持Bean别名、支持父子BeanFactory、支持Bean类型转化、支持Bean后置处理、支持FactoryBean、支持自动装配等")])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("ConfigurableBeanFactory：")])])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("AbstractBeanFactory：")])])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("AutowireCapableBeanFactory：")])])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("DefaultListableBeanFactory：")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);