(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{473:function(e,r,n){"use strict";n.r(r);var t=n(56),a=Object(t.a)({},(function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"六-resource是如何工作的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六-resource是如何工作的"}},[e._v("#")]),e._v(" 六：@Resource是如何工作的")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("@Resource注解和@Autowird注解类型，都是用来进行依赖注入的，@Resource是java层面所提供的注解，@Autowired是Spring所提供的注解，它们依赖注入的底层实现逻辑也不同。")])]),e._v(" "),n("li",[n("p",[e._v("@Resource注解中有一个name属性，针对name属性是否有值，@Resource的依赖注入底层流程是不同的。")])]),e._v(" "),n("li",[n("p",[e._v("@Resource如果name属性有值，nameSpring会直接根据所指定的name值去Spring容器中找Bean对象，如果找到了则成功，如果没找到，则报错。")])]),e._v(" "),n("li",[n("p",[e._v("如果@Resource中的name属性没有值，则：")]),e._v(" "),n("ul",[n("li",[e._v("先判断该属性名字在Spring中是否存在Bean对象")]),e._v(" "),n("li",[e._v("如果存在，则成功找到Bean对象进行注入")]),e._v(" "),n("li",[e._v("如果不存在，则根据属性类型去Spring容器找Bean对象，找到一个则进行注入")])])])])])}),[],!1,null,null,null);r.default=a.exports}}]);