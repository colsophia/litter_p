(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{479:function(a,n,e){"use strict";e.r(n);var t=e(56),r=Object(t.a)({},(function(){var a=this,n=a.$createElement,e=a._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"三-bean生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-bean生命周期"}},[a._v("#")]),a._v(" 三：Bean生命周期")]),a._v(" "),e("h2",{attrs:{id:"_1、什么是bean生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是bean生命周期"}},[a._v("#")]),a._v(" 1、什么是Bean生命周期")]),a._v(" "),e("p",[a._v("Bean生命周期描述的是Spring中一个Bean创建过程和销毁过程中所经历的步骤。")]),a._v(" "),e("p",[a._v("程序员可以利用Bean生命周期机制对Bean进行自定义加工。")]),a._v(" "),e("h2",{attrs:{id:"_2、bean的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、bean的生命周期"}},[a._v("#")]),a._v(" 2、Bean的生命周期")]),a._v(" "),e("p",[a._v("Bean定义 -> 选出一个构造方法  -> 构造方法反射得到对象（进行实例化） -> 属性填充 -> 初始化 -> AOP、生成代理对象")]),a._v(" "),e("ul",[e("li",[a._v("BeanDefinition表示Bean的定义，定义了Bean的类型。比如利用BeanDefinition中beanClass属性确定Bean的类型，从而实例化出来对象。")]),a._v(" "),e("li",[a._v("一个Bean中有多个构造方法，需要Spring来判断到底使用哪个构造方法。通过构造方法来实例化一个对象。")]),a._v(" "),e("li",[a._v("通过构造方法反射得到一个实例化对象，在Spring，可以通过BeanPostProcessor机制对实例化进行干预。")]),a._v(" "),e("li",[a._v("实例化所得到的对象，是“不完整”的对象，“不完整”的意思是该对象中的某些属性还没有进行属性填充，也就是Spring还没有自动给某些属性赋值，属性填充就是我们常说的自动注入、依赖注入。")]),a._v(" "),e("li",[a._v("在一个对象的属性填充之后，Spring提供了初始化机制，程序员可以利用初始化机制对Bean进行自定义加工，如利用InitializingBean接口对Bean中的其他属性进行赋值，或进行校验。")]),a._v(" "),e("li",[a._v("初始化后是Bean创建生命周期的最后一步，我们常说的Aop机制，就是在这个步骤中通过BeanPostProcessor机制实现的，初始化后得到的对象才是真正的Bean对象。")])])])}),[],!1,null,null,null);n.default=r.exports}}]);