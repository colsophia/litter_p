(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{475:function(t,v,r){"use strict";r.r(v);var _=r(56),n=Object(_.a)({},(function(){var t=this,v=t.$createElement,r=t._self._c||v;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"十一-aop的工作原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#十一-aop的工作原理"}},[t._v("#")]),t._v(" 十一：AOP的工作原理")]),t._v(" "),r("h2",{attrs:{id:"_1、aop是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、aop是什么"}},[t._v("#")]),t._v(" 1、AOP是什么")]),t._v(" "),r("p",[t._v("AOP是面向切面编程，是一种非常适合在无需修改业务代码的前提下，对某个或某些业务增加统一的功能，比如日志记录，权限控制，事务管理等，能很好的使得代码解耦，提高开发效率")]),t._v(" "),r("h2",{attrs:{id:"_2、aop和核心概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、aop和核心概念"}},[t._v("#")]),t._v(" 2、AOP和核心概念")]),t._v(" "),r("p",[r("strong",[t._v("1、Advice:")]),r("br"),t._v("\n  可以理解为通知、建议，在Spring中通过定义Advice来"),r("strong",[t._v("定义代理逻辑")]),t._v("。")]),t._v(" "),r("p",[r("strong",[t._v("2、PointCut")]),r("br"),t._v("\n  切点。表示Advice对应的"),r("strong",[t._v("代理逻辑应用在哪个类，哪个方法上")]),t._v("。")]),t._v(" "),r("p",[r("strong",[t._v("3、Advisor")]),r("br"),t._v("\n   Advisor = Advice +Pointcut，表示"),r("strong",[t._v("代理逻辑和切点是一个整体")]),t._v("，程序员可以通过定义或封装一个Advisor，来定义切点和代理逻辑。")]),t._v(" "),r("p",[r("strong",[t._v("4、Weaving")]),r("br"),t._v("\n   织入。将Advice"),r("strong",[t._v("代理逻辑")]),t._v("在源代码级别"),r("strong",[t._v("嵌入到切点的过程")]),t._v("，就叫做织入。")]),t._v(" "),r("p",[r("strong",[t._v("5、Target")]),r("br"),t._v("\n   目标对象，也就是代理对象。在AOP生成的"),r("strong",[t._v("代理对象中会持有目标对象")]),t._v("。")]),t._v(" "),r("p",[r("strong",[t._v("6、Join Point")]),r("br"),t._v("\n   连接点。在Spring AOP中，就是"),r("strong",[t._v("方法的执行点")]),t._v("。")])])}),[],!1,null,null,null);v.default=n.exports}}]);